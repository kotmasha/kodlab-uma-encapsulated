# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UMA_NEW', [dirname(__file__)])
        except ImportError:
            import _UMA_NEW
            return _UMA_NEW
        if fp is not None:
            try:
                _mod = imp.load_module('_UMA_NEW', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UMA_NEW = swig_import_helper()
    del swig_import_helper
else:
    import _UMA_NEW
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UMA_NEW.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _UMA_NEW.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UMA_NEW.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UMA_NEW.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UMA_NEW.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UMA_NEW.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UMA_NEW.SwigPyIterator_copy(self)

    def next(self):
        return _UMA_NEW.SwigPyIterator_next(self)

    def __next__(self):
        return _UMA_NEW.SwigPyIterator___next__(self)

    def previous(self):
        return _UMA_NEW.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UMA_NEW.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UMA_NEW.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UMA_NEW.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UMA_NEW.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UMA_NEW.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UMA_NEW.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UMA_NEW.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UMA_NEW.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.IntVector___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.IntVector___bool__(self)

    def __len__(self):
        return _UMA_NEW.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.IntVector___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.IntVector_pop(self)

    def append(self, x):
        return _UMA_NEW.IntVector_append(self, x)

    def empty(self):
        return _UMA_NEW.IntVector_empty(self)

    def size(self):
        return _UMA_NEW.IntVector_size(self)

    def swap(self, v):
        return _UMA_NEW.IntVector_swap(self, v)

    def begin(self):
        return _UMA_NEW.IntVector_begin(self)

    def end(self):
        return _UMA_NEW.IntVector_end(self)

    def rbegin(self):
        return _UMA_NEW.IntVector_rbegin(self)

    def rend(self):
        return _UMA_NEW.IntVector_rend(self)

    def clear(self):
        return _UMA_NEW.IntVector_clear(self)

    def get_allocator(self):
        return _UMA_NEW.IntVector_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.IntVector_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.IntVector_push_back(self, x)

    def front(self):
        return _UMA_NEW.IntVector_front(self)

    def back(self):
        return _UMA_NEW.IntVector_back(self)

    def assign(self, n, x):
        return _UMA_NEW.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.IntVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.IntVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.IntVector_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.IntVector_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _UMA_NEW.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.DoubleVector___bool__(self)

    def __len__(self):
        return _UMA_NEW.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.DoubleVector_pop(self)

    def append(self, x):
        return _UMA_NEW.DoubleVector_append(self, x)

    def empty(self):
        return _UMA_NEW.DoubleVector_empty(self)

    def size(self):
        return _UMA_NEW.DoubleVector_size(self)

    def swap(self, v):
        return _UMA_NEW.DoubleVector_swap(self, v)

    def begin(self):
        return _UMA_NEW.DoubleVector_begin(self)

    def end(self):
        return _UMA_NEW.DoubleVector_end(self)

    def rbegin(self):
        return _UMA_NEW.DoubleVector_rbegin(self)

    def rend(self):
        return _UMA_NEW.DoubleVector_rend(self)

    def clear(self):
        return _UMA_NEW.DoubleVector_clear(self)

    def get_allocator(self):
        return _UMA_NEW.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.DoubleVector_push_back(self, x)

    def front(self):
        return _UMA_NEW.DoubleVector_front(self)

    def back(self):
        return _UMA_NEW.DoubleVector_back(self)

    def assign(self, n, x):
        return _UMA_NEW.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.DoubleVector_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.DoubleVector_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _UMA_NEW.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.StringVector___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.StringVector___bool__(self)

    def __len__(self):
        return _UMA_NEW.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.StringVector___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.StringVector_pop(self)

    def append(self, x):
        return _UMA_NEW.StringVector_append(self, x)

    def empty(self):
        return _UMA_NEW.StringVector_empty(self)

    def size(self):
        return _UMA_NEW.StringVector_size(self)

    def swap(self, v):
        return _UMA_NEW.StringVector_swap(self, v)

    def begin(self):
        return _UMA_NEW.StringVector_begin(self)

    def end(self):
        return _UMA_NEW.StringVector_end(self)

    def rbegin(self):
        return _UMA_NEW.StringVector_rbegin(self)

    def rend(self):
        return _UMA_NEW.StringVector_rend(self)

    def clear(self):
        return _UMA_NEW.StringVector_clear(self)

    def get_allocator(self):
        return _UMA_NEW.StringVector_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.StringVector_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.StringVector_push_back(self, x)

    def front(self):
        return _UMA_NEW.StringVector_front(self)

    def back(self):
        return _UMA_NEW.StringVector_back(self)

    def assign(self, n, x):
        return _UMA_NEW.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.StringVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.StringVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.StringVector_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.StringVector_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _UMA_NEW.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.ConstCharVector___bool__(self)

    def __len__(self):
        return _UMA_NEW.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.ConstCharVector_pop(self)

    def append(self, x):
        return _UMA_NEW.ConstCharVector_append(self, x)

    def empty(self):
        return _UMA_NEW.ConstCharVector_empty(self)

    def size(self):
        return _UMA_NEW.ConstCharVector_size(self)

    def swap(self, v):
        return _UMA_NEW.ConstCharVector_swap(self, v)

    def begin(self):
        return _UMA_NEW.ConstCharVector_begin(self)

    def end(self):
        return _UMA_NEW.ConstCharVector_end(self)

    def rbegin(self):
        return _UMA_NEW.ConstCharVector_rbegin(self)

    def rend(self):
        return _UMA_NEW.ConstCharVector_rend(self)

    def clear(self):
        return _UMA_NEW.ConstCharVector_clear(self)

    def get_allocator(self):
        return _UMA_NEW.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.ConstCharVector_push_back(self, x)

    def front(self):
        return _UMA_NEW.ConstCharVector_front(self)

    def back(self):
        return _UMA_NEW.ConstCharVector_back(self)

    def assign(self, n, x):
        return _UMA_NEW.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.ConstCharVector_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _UMA_NEW.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.BoolVector___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.BoolVector___bool__(self)

    def __len__(self):
        return _UMA_NEW.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.BoolVector___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.BoolVector_pop(self)

    def append(self, x):
        return _UMA_NEW.BoolVector_append(self, x)

    def empty(self):
        return _UMA_NEW.BoolVector_empty(self)

    def size(self):
        return _UMA_NEW.BoolVector_size(self)

    def swap(self, v):
        return _UMA_NEW.BoolVector_swap(self, v)

    def begin(self):
        return _UMA_NEW.BoolVector_begin(self)

    def end(self):
        return _UMA_NEW.BoolVector_end(self)

    def rbegin(self):
        return _UMA_NEW.BoolVector_rbegin(self)

    def rend(self):
        return _UMA_NEW.BoolVector_rend(self)

    def clear(self):
        return _UMA_NEW.BoolVector_clear(self)

    def get_allocator(self):
        return _UMA_NEW.BoolVector_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.BoolVector_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_BoolVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.BoolVector_push_back(self, x)

    def front(self):
        return _UMA_NEW.BoolVector_front(self)

    def back(self):
        return _UMA_NEW.BoolVector_back(self)

    def assign(self, n, x):
        return _UMA_NEW.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.BoolVector_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.BoolVector_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _UMA_NEW.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.IntVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.IntVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.IntVector2D___bool__(self)

    def __len__(self):
        return _UMA_NEW.IntVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.IntVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.IntVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.IntVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.IntVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.IntVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.IntVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.IntVector2D_pop(self)

    def append(self, x):
        return _UMA_NEW.IntVector2D_append(self, x)

    def empty(self):
        return _UMA_NEW.IntVector2D_empty(self)

    def size(self):
        return _UMA_NEW.IntVector2D_size(self)

    def swap(self, v):
        return _UMA_NEW.IntVector2D_swap(self, v)

    def begin(self):
        return _UMA_NEW.IntVector2D_begin(self)

    def end(self):
        return _UMA_NEW.IntVector2D_end(self)

    def rbegin(self):
        return _UMA_NEW.IntVector2D_rbegin(self)

    def rend(self):
        return _UMA_NEW.IntVector2D_rend(self)

    def clear(self):
        return _UMA_NEW.IntVector2D_clear(self)

    def get_allocator(self):
        return _UMA_NEW.IntVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.IntVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.IntVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_IntVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.IntVector2D_push_back(self, x)

    def front(self):
        return _UMA_NEW.IntVector2D_front(self)

    def back(self):
        return _UMA_NEW.IntVector2D_back(self)

    def assign(self, n, x):
        return _UMA_NEW.IntVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.IntVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.IntVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.IntVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.IntVector2D_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_IntVector2D
    __del__ = lambda self: None
IntVector2D_swigregister = _UMA_NEW.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.DoubleVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.DoubleVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.DoubleVector2D___bool__(self)

    def __len__(self):
        return _UMA_NEW.DoubleVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.DoubleVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.DoubleVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.DoubleVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.DoubleVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.DoubleVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.DoubleVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.DoubleVector2D_pop(self)

    def append(self, x):
        return _UMA_NEW.DoubleVector2D_append(self, x)

    def empty(self):
        return _UMA_NEW.DoubleVector2D_empty(self)

    def size(self):
        return _UMA_NEW.DoubleVector2D_size(self)

    def swap(self, v):
        return _UMA_NEW.DoubleVector2D_swap(self, v)

    def begin(self):
        return _UMA_NEW.DoubleVector2D_begin(self)

    def end(self):
        return _UMA_NEW.DoubleVector2D_end(self)

    def rbegin(self):
        return _UMA_NEW.DoubleVector2D_rbegin(self)

    def rend(self):
        return _UMA_NEW.DoubleVector2D_rend(self)

    def clear(self):
        return _UMA_NEW.DoubleVector2D_clear(self)

    def get_allocator(self):
        return _UMA_NEW.DoubleVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.DoubleVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.DoubleVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_DoubleVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.DoubleVector2D_push_back(self, x)

    def front(self):
        return _UMA_NEW.DoubleVector2D_front(self)

    def back(self):
        return _UMA_NEW.DoubleVector2D_back(self)

    def assign(self, n, x):
        return _UMA_NEW.DoubleVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.DoubleVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.DoubleVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.DoubleVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.DoubleVector2D_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_DoubleVector2D
    __del__ = lambda self: None
DoubleVector2D_swigregister = _UMA_NEW.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.StringVector2D___bool__(self)

    def __len__(self):
        return _UMA_NEW.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.StringVector2D_pop(self)

    def append(self, x):
        return _UMA_NEW.StringVector2D_append(self, x)

    def empty(self):
        return _UMA_NEW.StringVector2D_empty(self)

    def size(self):
        return _UMA_NEW.StringVector2D_size(self)

    def swap(self, v):
        return _UMA_NEW.StringVector2D_swap(self, v)

    def begin(self):
        return _UMA_NEW.StringVector2D_begin(self)

    def end(self):
        return _UMA_NEW.StringVector2D_end(self)

    def rbegin(self):
        return _UMA_NEW.StringVector2D_rbegin(self)

    def rend(self):
        return _UMA_NEW.StringVector2D_rend(self)

    def clear(self):
        return _UMA_NEW.StringVector2D_clear(self)

    def get_allocator(self):
        return _UMA_NEW.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.StringVector2D_push_back(self, x)

    def front(self):
        return _UMA_NEW.StringVector2D_front(self)

    def back(self):
        return _UMA_NEW.StringVector2D_back(self)

    def assign(self, n, x):
        return _UMA_NEW.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.StringVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.StringVector2D_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _UMA_NEW.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class ConstCharVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.ConstCharVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.ConstCharVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.ConstCharVector2D___bool__(self)

    def __len__(self):
        return _UMA_NEW.ConstCharVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.ConstCharVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.ConstCharVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.ConstCharVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.ConstCharVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.ConstCharVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.ConstCharVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.ConstCharVector2D_pop(self)

    def append(self, x):
        return _UMA_NEW.ConstCharVector2D_append(self, x)

    def empty(self):
        return _UMA_NEW.ConstCharVector2D_empty(self)

    def size(self):
        return _UMA_NEW.ConstCharVector2D_size(self)

    def swap(self, v):
        return _UMA_NEW.ConstCharVector2D_swap(self, v)

    def begin(self):
        return _UMA_NEW.ConstCharVector2D_begin(self)

    def end(self):
        return _UMA_NEW.ConstCharVector2D_end(self)

    def rbegin(self):
        return _UMA_NEW.ConstCharVector2D_rbegin(self)

    def rend(self):
        return _UMA_NEW.ConstCharVector2D_rend(self)

    def clear(self):
        return _UMA_NEW.ConstCharVector2D_clear(self)

    def get_allocator(self):
        return _UMA_NEW.ConstCharVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.ConstCharVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.ConstCharVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_ConstCharVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.ConstCharVector2D_push_back(self, x)

    def front(self):
        return _UMA_NEW.ConstCharVector2D_front(self)

    def back(self):
        return _UMA_NEW.ConstCharVector2D_back(self)

    def assign(self, n, x):
        return _UMA_NEW.ConstCharVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.ConstCharVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.ConstCharVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.ConstCharVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.ConstCharVector2D_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_ConstCharVector2D
    __del__ = lambda self: None
ConstCharVector2D_swigregister = _UMA_NEW.ConstCharVector2D_swigregister
ConstCharVector2D_swigregister(ConstCharVector2D)

class BoolVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA_NEW.BoolVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA_NEW.BoolVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA_NEW.BoolVector2D___bool__(self)

    def __len__(self):
        return _UMA_NEW.BoolVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA_NEW.BoolVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA_NEW.BoolVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA_NEW.BoolVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA_NEW.BoolVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA_NEW.BoolVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA_NEW.BoolVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA_NEW.BoolVector2D_pop(self)

    def append(self, x):
        return _UMA_NEW.BoolVector2D_append(self, x)

    def empty(self):
        return _UMA_NEW.BoolVector2D_empty(self)

    def size(self):
        return _UMA_NEW.BoolVector2D_size(self)

    def swap(self, v):
        return _UMA_NEW.BoolVector2D_swap(self, v)

    def begin(self):
        return _UMA_NEW.BoolVector2D_begin(self)

    def end(self):
        return _UMA_NEW.BoolVector2D_end(self)

    def rbegin(self):
        return _UMA_NEW.BoolVector2D_rbegin(self)

    def rend(self):
        return _UMA_NEW.BoolVector2D_rend(self)

    def clear(self):
        return _UMA_NEW.BoolVector2D_clear(self)

    def get_allocator(self):
        return _UMA_NEW.BoolVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA_NEW.BoolVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA_NEW.BoolVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA_NEW.new_BoolVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA_NEW.BoolVector2D_push_back(self, x)

    def front(self):
        return _UMA_NEW.BoolVector2D_front(self)

    def back(self):
        return _UMA_NEW.BoolVector2D_back(self)

    def assign(self, n, x):
        return _UMA_NEW.BoolVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA_NEW.BoolVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA_NEW.BoolVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA_NEW.BoolVector2D_reserve(self, n)

    def capacity(self):
        return _UMA_NEW.BoolVector2D_capacity(self)
    __swig_destroy__ = _UMA_NEW.delete_BoolVector2D
    __del__ = lambda self: None
BoolVector2D_swigregister = _UMA_NEW.BoolVector2D_swigregister
BoolVector2D_swigregister(BoolVector2D)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr
    EMPIRICAL = _UMA_NEW.Agent_EMPIRICAL
    DISTRIBUTED = _UMA_NEW.Agent_DISTRIBUTED
    DISCOUNTED = _UMA_NEW.Agent_DISCOUNTED
    __swig_setmethods__["selected_touched_workers"] = _UMA_NEW.Agent_selected_touched_workers_set
    __swig_getmethods__["selected_touched_workers"] = _UMA_NEW.Agent_selected_touched_workers_get
    if _newclass:
        selected_touched_workers = _swig_property(_UMA_NEW.Agent_selected_touched_workers_get, _UMA_NEW.Agent_selected_touched_workers_set)
    __swig_setmethods__["selected_projected_signal"] = _UMA_NEW.Agent_selected_projected_signal_set
    __swig_getmethods__["selected_projected_signal"] = _UMA_NEW.Agent_selected_projected_signal_get
    if _newclass:
        selected_projected_signal = _swig_property(_UMA_NEW.Agent_selected_projected_signal_get, _UMA_NEW.Agent_selected_projected_signal_set)

    def __init__(self, type, threshold):
        this = _UMA_NEW.new_Agent(type, threshold)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA_NEW.delete_Agent
    __del__ = lambda self: None

    def decide(self, mode, param1, param2):
        return _UMA_NEW.Agent_decide(self, mode, param1, param2)

    def translate(self, index_list):
        return _UMA_NEW.Agent_translate(self, index_list)

    def checkParam(self, *args):
        return _UMA_NEW.Agent_checkParam(self, *args)

    def getDecision(self):
        return _UMA_NEW.Agent_getDecision(self)

    def getMessage(self):
        return _UMA_NEW.Agent_getMessage(self)

    def initData(self, name, sensorSize, context_key, context_value, sensors_names, evals_names, generalized_actions):
        return _UMA_NEW.Agent_initData(self, name, sensorSize, context_key, context_value, sensors_names, evals_names, generalized_actions)

    def freeData(self):
        return _UMA_NEW.Agent_freeData(self)

    def update_weights(self):
        return _UMA_NEW.Agent_update_weights(self)

    def update_state_GPU(self, mode):
        return _UMA_NEW.Agent_update_state_GPU(self, mode)

    def propagate_GPU(self):
        return _UMA_NEW.Agent_propagate_GPU(self)

    def halucinate_GPU(self, actions_list):
        return _UMA_NEW.Agent_halucinate_GPU(self, actions_list)

    def initMask(self, actions_list):
        return _UMA_NEW.Agent_initMask(self, actions_list)

    def setSignal(self, observe):
        return _UMA_NEW.Agent_setSignal(self, observe)

    def getCurrent(self):
        return _UMA_NEW.Agent_getCurrent(self)

    def getLoad(self):
        return _UMA_NEW.Agent_getLoad(self)

    def getAffectedWorkers(self):
        return _UMA_NEW.Agent_getAffectedWorkers(self)

    def getDir(self):
        return _UMA_NEW.Agent_getDir(self)

    def halucinate(self, action_list):
        return _UMA_NEW.Agent_halucinate(self, action_list)

    def initWorkerMemory(self, weights, dir):
        return _UMA_NEW.Agent_initWorkerMemory(self, weights, dir)

    def get_n_update_weight(self):
        return _UMA_NEW.Agent_get_n_update_weight(self)

    def get_n_orient_all(self):
        return _UMA_NEW.Agent_get_n_orient_all(self)

    def get_n_propagation(self):
        return _UMA_NEW.Agent_get_n_propagation(self)

    def get_t_update_weight(self):
        return _UMA_NEW.Agent_get_t_update_weight(self)

    def get_t_orient_all(self):
        return _UMA_NEW.Agent_get_t_orient_all(self)

    def get_t_propagation(self):
        return _UMA_NEW.Agent_get_t_propagation(self)
Agent_swigregister = _UMA_NEW.Agent_swigregister
Agent_swigregister(Agent)

class Agent_Empirical(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent_Empirical, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Agent_Empirical, name)
    __repr__ = _swig_repr

    def __init__(self, threshold):
        this = _UMA_NEW.new_Agent_Empirical(threshold)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA_NEW.delete_Agent_Empirical
    __del__ = lambda self: None

    def update_weights(self):
        return _UMA_NEW.Agent_Empirical_update_weights(self)

    def initWorkerMemory(self, weights, dir):
        return _UMA_NEW.Agent_Empirical_initWorkerMemory(self, weights, dir)
Agent_Empirical_swigregister = _UMA_NEW.Agent_Empirical_swigregister
Agent_Empirical_swigregister(Agent_Empirical)

class Agent_Distributed(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent_Distributed, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Agent_Distributed, name)
    __repr__ = _swig_repr

    def __init__(self, threshold):
        this = _UMA_NEW.new_Agent_Distributed(threshold)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA_NEW.delete_Agent_Distributed
    __del__ = lambda self: None

    def update_weights(self):
        return _UMA_NEW.Agent_Distributed_update_weights(self)

    def initWorkerMemory(self, weights, dir):
        return _UMA_NEW.Agent_Distributed_initWorkerMemory(self, weights, dir)
Agent_Distributed_swigregister = _UMA_NEW.Agent_Distributed_swigregister
Agent_Distributed_swigregister(Agent_Distributed)

class Agent_Discounted(Agent):
    __swig_setmethods__ = {}
    for _s in [Agent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent_Discounted, name, value)
    __swig_getmethods__ = {}
    for _s in [Agent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Agent_Discounted, name)
    __repr__ = _swig_repr

    def __init__(self, threshold, q):
        this = _UMA_NEW.new_Agent_Discounted(threshold, q)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA_NEW.delete_Agent_Discounted
    __del__ = lambda self: None

    def update_weights(self):
        return _UMA_NEW.Agent_Discounted_update_weights(self)

    def initWorkerMemory(self, weights, dir):
        return _UMA_NEW.Agent_Discounted_initWorkerMemory(self, weights, dir)
Agent_Discounted_swigregister = _UMA_NEW.Agent_Discounted_swigregister
Agent_Discounted_swigregister(Agent_Discounted)

class worker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, worker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, worker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _UMA_NEW.new_worker(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["add_time"] = lambda x: _UMA_NEW.worker_add_time
    if _newclass:
        add_time = staticmethod(_UMA_NEW.worker_add_time)
    __swig_getmethods__["reset_time"] = lambda x: _UMA_NEW.worker_reset_time
    if _newclass:
        reset_time = staticmethod(_UMA_NEW.worker_reset_time)
    __swig_setmethods__["sensor_name1"] = _UMA_NEW.worker_sensor_name1_set
    __swig_getmethods__["sensor_name1"] = _UMA_NEW.worker_sensor_name1_get
    if _newclass:
        sensor_name1 = _swig_property(_UMA_NEW.worker_sensor_name1_get, _UMA_NEW.worker_sensor_name1_set)
    __swig_setmethods__["sensor_name2"] = _UMA_NEW.worker_sensor_name2_set
    __swig_getmethods__["sensor_name2"] = _UMA_NEW.worker_sensor_name2_get
    if _newclass:
        sensor_name2 = _swig_property(_UMA_NEW.worker_sensor_name2_get, _UMA_NEW.worker_sensor_name2_set)
    __swig_setmethods__["sensor_id1"] = _UMA_NEW.worker_sensor_id1_set
    __swig_getmethods__["sensor_id1"] = _UMA_NEW.worker_sensor_id1_get
    if _newclass:
        sensor_id1 = _swig_property(_UMA_NEW.worker_sensor_id1_get, _UMA_NEW.worker_sensor_id1_set)
    __swig_setmethods__["sensor_id2"] = _UMA_NEW.worker_sensor_id2_set
    __swig_getmethods__["sensor_id2"] = _UMA_NEW.worker_sensor_id2_get
    if _newclass:
        sensor_id2 = _swig_property(_UMA_NEW.worker_sensor_id2_get, _UMA_NEW.worker_sensor_id2_set)
    __swig_setmethods__["wij"] = _UMA_NEW.worker_wij_set
    __swig_getmethods__["wij"] = _UMA_NEW.worker_wij_get
    if _newclass:
        wij = _swig_property(_UMA_NEW.worker_wij_get, _UMA_NEW.worker_wij_set)
    __swig_setmethods__["w_ij"] = _UMA_NEW.worker_w_ij_set
    __swig_getmethods__["w_ij"] = _UMA_NEW.worker_w_ij_get
    if _newclass:
        w_ij = _swig_property(_UMA_NEW.worker_w_ij_get, _UMA_NEW.worker_w_ij_set)
    __swig_setmethods__["wi_j"] = _UMA_NEW.worker_wi_j_set
    __swig_getmethods__["wi_j"] = _UMA_NEW.worker_wi_j_get
    if _newclass:
        wi_j = _swig_property(_UMA_NEW.worker_wi_j_get, _UMA_NEW.worker_wi_j_set)
    __swig_setmethods__["w_i_j"] = _UMA_NEW.worker_w_i_j_set
    __swig_getmethods__["w_i_j"] = _UMA_NEW.worker_w_i_j_get
    if _newclass:
        w_i_j = _swig_property(_UMA_NEW.worker_w_i_j_get, _UMA_NEW.worker_w_i_j_set)
    __swig_setmethods__["dij"] = _UMA_NEW.worker_dij_set
    __swig_getmethods__["dij"] = _UMA_NEW.worker_dij_get
    if _newclass:
        dij = _swig_property(_UMA_NEW.worker_dij_get, _UMA_NEW.worker_dij_set)
    __swig_setmethods__["d_ij"] = _UMA_NEW.worker_d_ij_set
    __swig_getmethods__["d_ij"] = _UMA_NEW.worker_d_ij_get
    if _newclass:
        d_ij = _swig_property(_UMA_NEW.worker_d_ij_get, _UMA_NEW.worker_d_ij_set)
    __swig_setmethods__["di_j"] = _UMA_NEW.worker_di_j_set
    __swig_getmethods__["di_j"] = _UMA_NEW.worker_di_j_get
    if _newclass:
        di_j = _swig_property(_UMA_NEW.worker_di_j_get, _UMA_NEW.worker_di_j_set)
    __swig_setmethods__["d_i_j"] = _UMA_NEW.worker_d_i_j_set
    __swig_getmethods__["d_i_j"] = _UMA_NEW.worker_d_i_j_get
    if _newclass:
        d_i_j = _swig_property(_UMA_NEW.worker_d_i_j_get, _UMA_NEW.worker_d_i_j_set)
    __swig_setmethods__["dji"] = _UMA_NEW.worker_dji_set
    __swig_getmethods__["dji"] = _UMA_NEW.worker_dji_get
    if _newclass:
        dji = _swig_property(_UMA_NEW.worker_dji_get, _UMA_NEW.worker_dji_set)
    __swig_setmethods__["d_ji"] = _UMA_NEW.worker_d_ji_set
    __swig_getmethods__["d_ji"] = _UMA_NEW.worker_d_ji_get
    if _newclass:
        d_ji = _swig_property(_UMA_NEW.worker_d_ji_get, _UMA_NEW.worker_d_ji_set)
    __swig_setmethods__["dj_i"] = _UMA_NEW.worker_dj_i_set
    __swig_getmethods__["dj_i"] = _UMA_NEW.worker_dj_i_get
    if _newclass:
        dj_i = _swig_property(_UMA_NEW.worker_dj_i_get, _UMA_NEW.worker_dj_i_set)
    __swig_setmethods__["d_j_i"] = _UMA_NEW.worker_d_j_i_set
    __swig_getmethods__["d_j_i"] = _UMA_NEW.worker_d_j_i_get
    if _newclass:
        d_j_i = _swig_property(_UMA_NEW.worker_d_j_i_get, _UMA_NEW.worker_d_j_i_set)
    __swig_setmethods__["threshold"] = _UMA_NEW.worker_threshold_set
    __swig_getmethods__["threshold"] = _UMA_NEW.worker_threshold_get
    if _newclass:
        threshold = _swig_property(_UMA_NEW.worker_threshold_get, _UMA_NEW.worker_threshold_set)
    __swig_setmethods__["epsilon"] = _UMA_NEW.worker_epsilon_set
    __swig_getmethods__["epsilon"] = _UMA_NEW.worker_epsilon_get
    if _newclass:
        epsilon = _swig_property(_UMA_NEW.worker_epsilon_get, _UMA_NEW.worker_epsilon_set)
    __swig_setmethods__["q"] = _UMA_NEW.worker_q_set
    __swig_getmethods__["q"] = _UMA_NEW.worker_q_get
    if _newclass:
        q = _swig_property(_UMA_NEW.worker_q_get, _UMA_NEW.worker_q_set)
    __swig_setmethods__["t"] = _UMA_NEW.worker_t_set
    __swig_getmethods__["t"] = _UMA_NEW.worker_t_get
    if _newclass:
        t = _swig_property(_UMA_NEW.worker_t_get, _UMA_NEW.worker_t_set)
    __swig_destroy__ = _UMA_NEW.delete_worker
    __del__ = lambda self: None
worker_swigregister = _UMA_NEW.worker_swigregister
worker_swigregister(worker)

def worker_add_time():
    return _UMA_NEW.worker_add_time()
worker_add_time = _UMA_NEW.worker_add_time

def worker_reset_time():
    return _UMA_NEW.worker_reset_time()
worker_reset_time = _UMA_NEW.worker_reset_time
cvar = _UMA_NEW.cvar

# This file is compatible with both classic and new-style classes.


