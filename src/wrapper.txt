class Wrapper:

def __init__(self,agent,type,threshold,q=0)

This is the init function for wrapper class. The wrapper class is a link between UMA
c++ module and python module. C++ module is a variable in wrapper class, and the wrapper
object returned here is SUPPOSED to be reside on the agent class in python. So through
python agent class you can direct control UMA c++ module without using direct c++ API

self: this wrapper class object
agent: the python agent class object
type: {'EMPIRICAL','DISTRIBUTED','DISCOUNTED'} three types of variables, only for now
threshold: threshold variable for agent
q: q variable for DISCOUNTED type of agent if necessary, default is 0


def sendSignal(self)

This function will get the signal value from OBSERVE in agent and pass that into c++
module

def decide(self,mode,param)

This function is the decide process, no need to specify mode variable here.

mode: the mode for orient_all
param: the parameter for decide

def getValue(self)

This function return the message and decision value requested by each simulation

return: decision, message

def init(self)

This is the data init function for agent, it will automatically fetch data from agent
be sure to call this function when you have all DATA INITIALIZED