# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UMA', [dirname(__file__)])
        except ImportError:
            import _UMA
            return _UMA
        if fp is not None:
            try:
                _mod = imp.load_module('_UMA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UMA = swig_import_helper()
    del swig_import_helper
else:
    import _UMA
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UMA.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _UMA.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UMA.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UMA.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UMA.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UMA.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UMA.SwigPyIterator_copy(self)

    def next(self):
        return _UMA.SwigPyIterator_next(self)

    def __next__(self):
        return _UMA.SwigPyIterator___next__(self)

    def previous(self):
        return _UMA.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UMA.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UMA.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UMA.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UMA.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UMA.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UMA.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UMA.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UMA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.IntVector___nonzero__(self)

    def __bool__(self):
        return _UMA.IntVector___bool__(self)

    def __len__(self):
        return _UMA.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.IntVector___setitem__(self, *args)

    def pop(self):
        return _UMA.IntVector_pop(self)

    def append(self, x):
        return _UMA.IntVector_append(self, x)

    def empty(self):
        return _UMA.IntVector_empty(self)

    def size(self):
        return _UMA.IntVector_size(self)

    def swap(self, v):
        return _UMA.IntVector_swap(self, v)

    def begin(self):
        return _UMA.IntVector_begin(self)

    def end(self):
        return _UMA.IntVector_end(self)

    def rbegin(self):
        return _UMA.IntVector_rbegin(self)

    def rend(self):
        return _UMA.IntVector_rend(self)

    def clear(self):
        return _UMA.IntVector_clear(self)

    def get_allocator(self):
        return _UMA.IntVector_get_allocator(self)

    def pop_back(self):
        return _UMA.IntVector_pop_back(self)

    def erase(self, *args):
        return _UMA.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.IntVector_push_back(self, x)

    def front(self):
        return _UMA.IntVector_front(self)

    def back(self):
        return _UMA.IntVector_back(self)

    def assign(self, n, x):
        return _UMA.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA.IntVector_resize(self, *args)

    def insert(self, *args):
        return _UMA.IntVector_insert(self, *args)

    def reserve(self, n):
        return _UMA.IntVector_reserve(self, n)

    def capacity(self):
        return _UMA.IntVector_capacity(self)
    __swig_destroy__ = _UMA.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _UMA.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _UMA.DoubleVector___bool__(self)

    def __len__(self):
        return _UMA.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _UMA.DoubleVector_pop(self)

    def append(self, x):
        return _UMA.DoubleVector_append(self, x)

    def empty(self):
        return _UMA.DoubleVector_empty(self)

    def size(self):
        return _UMA.DoubleVector_size(self)

    def swap(self, v):
        return _UMA.DoubleVector_swap(self, v)

    def begin(self):
        return _UMA.DoubleVector_begin(self)

    def end(self):
        return _UMA.DoubleVector_end(self)

    def rbegin(self):
        return _UMA.DoubleVector_rbegin(self)

    def rend(self):
        return _UMA.DoubleVector_rend(self)

    def clear(self):
        return _UMA.DoubleVector_clear(self)

    def get_allocator(self):
        return _UMA.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _UMA.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _UMA.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.DoubleVector_push_back(self, x)

    def front(self):
        return _UMA.DoubleVector_front(self)

    def back(self):
        return _UMA.DoubleVector_back(self)

    def assign(self, n, x):
        return _UMA.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _UMA.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _UMA.DoubleVector_reserve(self, n)

    def capacity(self):
        return _UMA.DoubleVector_capacity(self)
    __swig_destroy__ = _UMA.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _UMA.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.StringVector___nonzero__(self)

    def __bool__(self):
        return _UMA.StringVector___bool__(self)

    def __len__(self):
        return _UMA.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.StringVector___setitem__(self, *args)

    def pop(self):
        return _UMA.StringVector_pop(self)

    def append(self, x):
        return _UMA.StringVector_append(self, x)

    def empty(self):
        return _UMA.StringVector_empty(self)

    def size(self):
        return _UMA.StringVector_size(self)

    def swap(self, v):
        return _UMA.StringVector_swap(self, v)

    def begin(self):
        return _UMA.StringVector_begin(self)

    def end(self):
        return _UMA.StringVector_end(self)

    def rbegin(self):
        return _UMA.StringVector_rbegin(self)

    def rend(self):
        return _UMA.StringVector_rend(self)

    def clear(self):
        return _UMA.StringVector_clear(self)

    def get_allocator(self):
        return _UMA.StringVector_get_allocator(self)

    def pop_back(self):
        return _UMA.StringVector_pop_back(self)

    def erase(self, *args):
        return _UMA.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.StringVector_push_back(self, x)

    def front(self):
        return _UMA.StringVector_front(self)

    def back(self):
        return _UMA.StringVector_back(self)

    def assign(self, n, x):
        return _UMA.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA.StringVector_resize(self, *args)

    def insert(self, *args):
        return _UMA.StringVector_insert(self, *args)

    def reserve(self, n):
        return _UMA.StringVector_reserve(self, n)

    def capacity(self):
        return _UMA.StringVector_capacity(self)
    __swig_destroy__ = _UMA.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _UMA.StringVector_swigregister
StringVector_swigregister(StringVector)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _UMA.ConstCharVector___bool__(self)

    def __len__(self):
        return _UMA.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _UMA.ConstCharVector_pop(self)

    def append(self, x):
        return _UMA.ConstCharVector_append(self, x)

    def empty(self):
        return _UMA.ConstCharVector_empty(self)

    def size(self):
        return _UMA.ConstCharVector_size(self)

    def swap(self, v):
        return _UMA.ConstCharVector_swap(self, v)

    def begin(self):
        return _UMA.ConstCharVector_begin(self)

    def end(self):
        return _UMA.ConstCharVector_end(self)

    def rbegin(self):
        return _UMA.ConstCharVector_rbegin(self)

    def rend(self):
        return _UMA.ConstCharVector_rend(self)

    def clear(self):
        return _UMA.ConstCharVector_clear(self)

    def get_allocator(self):
        return _UMA.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _UMA.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _UMA.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.ConstCharVector_push_back(self, x)

    def front(self):
        return _UMA.ConstCharVector_front(self)

    def back(self):
        return _UMA.ConstCharVector_back(self)

    def assign(self, n, x):
        return _UMA.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _UMA.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _UMA.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _UMA.ConstCharVector_capacity(self)
    __swig_destroy__ = _UMA.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _UMA.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.BoolVector___nonzero__(self)

    def __bool__(self):
        return _UMA.BoolVector___bool__(self)

    def __len__(self):
        return _UMA.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _UMA.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.BoolVector___setitem__(self, *args)

    def pop(self):
        return _UMA.BoolVector_pop(self)

    def append(self, x):
        return _UMA.BoolVector_append(self, x)

    def empty(self):
        return _UMA.BoolVector_empty(self)

    def size(self):
        return _UMA.BoolVector_size(self)

    def swap(self, v):
        return _UMA.BoolVector_swap(self, v)

    def begin(self):
        return _UMA.BoolVector_begin(self)

    def end(self):
        return _UMA.BoolVector_end(self)

    def rbegin(self):
        return _UMA.BoolVector_rbegin(self)

    def rend(self):
        return _UMA.BoolVector_rend(self)

    def clear(self):
        return _UMA.BoolVector_clear(self)

    def get_allocator(self):
        return _UMA.BoolVector_get_allocator(self)

    def pop_back(self):
        return _UMA.BoolVector_pop_back(self)

    def erase(self, *args):
        return _UMA.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_BoolVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.BoolVector_push_back(self, x)

    def front(self):
        return _UMA.BoolVector_front(self)

    def back(self):
        return _UMA.BoolVector_back(self)

    def assign(self, n, x):
        return _UMA.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _UMA.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _UMA.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _UMA.BoolVector_reserve(self, n)

    def capacity(self):
        return _UMA.BoolVector_capacity(self)
    __swig_destroy__ = _UMA.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _UMA.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class IntVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.IntVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.IntVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA.IntVector2D___bool__(self)

    def __len__(self):
        return _UMA.IntVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA.IntVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.IntVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.IntVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.IntVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.IntVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.IntVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA.IntVector2D_pop(self)

    def append(self, x):
        return _UMA.IntVector2D_append(self, x)

    def empty(self):
        return _UMA.IntVector2D_empty(self)

    def size(self):
        return _UMA.IntVector2D_size(self)

    def swap(self, v):
        return _UMA.IntVector2D_swap(self, v)

    def begin(self):
        return _UMA.IntVector2D_begin(self)

    def end(self):
        return _UMA.IntVector2D_end(self)

    def rbegin(self):
        return _UMA.IntVector2D_rbegin(self)

    def rend(self):
        return _UMA.IntVector2D_rend(self)

    def clear(self):
        return _UMA.IntVector2D_clear(self)

    def get_allocator(self):
        return _UMA.IntVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA.IntVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA.IntVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_IntVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.IntVector2D_push_back(self, x)

    def front(self):
        return _UMA.IntVector2D_front(self)

    def back(self):
        return _UMA.IntVector2D_back(self)

    def assign(self, n, x):
        return _UMA.IntVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA.IntVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA.IntVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA.IntVector2D_reserve(self, n)

    def capacity(self):
        return _UMA.IntVector2D_capacity(self)
    __swig_destroy__ = _UMA.delete_IntVector2D
    __del__ = lambda self: None
IntVector2D_swigregister = _UMA.IntVector2D_swigregister
IntVector2D_swigregister(IntVector2D)

class DoubleVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.DoubleVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.DoubleVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA.DoubleVector2D___bool__(self)

    def __len__(self):
        return _UMA.DoubleVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA.DoubleVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.DoubleVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.DoubleVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.DoubleVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.DoubleVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.DoubleVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA.DoubleVector2D_pop(self)

    def append(self, x):
        return _UMA.DoubleVector2D_append(self, x)

    def empty(self):
        return _UMA.DoubleVector2D_empty(self)

    def size(self):
        return _UMA.DoubleVector2D_size(self)

    def swap(self, v):
        return _UMA.DoubleVector2D_swap(self, v)

    def begin(self):
        return _UMA.DoubleVector2D_begin(self)

    def end(self):
        return _UMA.DoubleVector2D_end(self)

    def rbegin(self):
        return _UMA.DoubleVector2D_rbegin(self)

    def rend(self):
        return _UMA.DoubleVector2D_rend(self)

    def clear(self):
        return _UMA.DoubleVector2D_clear(self)

    def get_allocator(self):
        return _UMA.DoubleVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA.DoubleVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA.DoubleVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_DoubleVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.DoubleVector2D_push_back(self, x)

    def front(self):
        return _UMA.DoubleVector2D_front(self)

    def back(self):
        return _UMA.DoubleVector2D_back(self)

    def assign(self, n, x):
        return _UMA.DoubleVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA.DoubleVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA.DoubleVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA.DoubleVector2D_reserve(self, n)

    def capacity(self):
        return _UMA.DoubleVector2D_capacity(self)
    __swig_destroy__ = _UMA.delete_DoubleVector2D
    __del__ = lambda self: None
DoubleVector2D_swigregister = _UMA.DoubleVector2D_swigregister
DoubleVector2D_swigregister(DoubleVector2D)

class StringVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.StringVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.StringVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA.StringVector2D___bool__(self)

    def __len__(self):
        return _UMA.StringVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA.StringVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.StringVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.StringVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.StringVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.StringVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.StringVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA.StringVector2D_pop(self)

    def append(self, x):
        return _UMA.StringVector2D_append(self, x)

    def empty(self):
        return _UMA.StringVector2D_empty(self)

    def size(self):
        return _UMA.StringVector2D_size(self)

    def swap(self, v):
        return _UMA.StringVector2D_swap(self, v)

    def begin(self):
        return _UMA.StringVector2D_begin(self)

    def end(self):
        return _UMA.StringVector2D_end(self)

    def rbegin(self):
        return _UMA.StringVector2D_rbegin(self)

    def rend(self):
        return _UMA.StringVector2D_rend(self)

    def clear(self):
        return _UMA.StringVector2D_clear(self)

    def get_allocator(self):
        return _UMA.StringVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA.StringVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA.StringVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_StringVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.StringVector2D_push_back(self, x)

    def front(self):
        return _UMA.StringVector2D_front(self)

    def back(self):
        return _UMA.StringVector2D_back(self)

    def assign(self, n, x):
        return _UMA.StringVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA.StringVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA.StringVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA.StringVector2D_reserve(self, n)

    def capacity(self):
        return _UMA.StringVector2D_capacity(self)
    __swig_destroy__ = _UMA.delete_StringVector2D
    __del__ = lambda self: None
StringVector2D_swigregister = _UMA.StringVector2D_swigregister
StringVector2D_swigregister(StringVector2D)

class ConstCharVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.ConstCharVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.ConstCharVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA.ConstCharVector2D___bool__(self)

    def __len__(self):
        return _UMA.ConstCharVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA.ConstCharVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.ConstCharVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.ConstCharVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.ConstCharVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.ConstCharVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.ConstCharVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA.ConstCharVector2D_pop(self)

    def append(self, x):
        return _UMA.ConstCharVector2D_append(self, x)

    def empty(self):
        return _UMA.ConstCharVector2D_empty(self)

    def size(self):
        return _UMA.ConstCharVector2D_size(self)

    def swap(self, v):
        return _UMA.ConstCharVector2D_swap(self, v)

    def begin(self):
        return _UMA.ConstCharVector2D_begin(self)

    def end(self):
        return _UMA.ConstCharVector2D_end(self)

    def rbegin(self):
        return _UMA.ConstCharVector2D_rbegin(self)

    def rend(self):
        return _UMA.ConstCharVector2D_rend(self)

    def clear(self):
        return _UMA.ConstCharVector2D_clear(self)

    def get_allocator(self):
        return _UMA.ConstCharVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA.ConstCharVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA.ConstCharVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_ConstCharVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.ConstCharVector2D_push_back(self, x)

    def front(self):
        return _UMA.ConstCharVector2D_front(self)

    def back(self):
        return _UMA.ConstCharVector2D_back(self)

    def assign(self, n, x):
        return _UMA.ConstCharVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA.ConstCharVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA.ConstCharVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA.ConstCharVector2D_reserve(self, n)

    def capacity(self):
        return _UMA.ConstCharVector2D_capacity(self)
    __swig_destroy__ = _UMA.delete_ConstCharVector2D
    __del__ = lambda self: None
ConstCharVector2D_swigregister = _UMA.ConstCharVector2D_swigregister
ConstCharVector2D_swigregister(ConstCharVector2D)

class BoolVector2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector2D, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _UMA.BoolVector2D_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _UMA.BoolVector2D___nonzero__(self)

    def __bool__(self):
        return _UMA.BoolVector2D___bool__(self)

    def __len__(self):
        return _UMA.BoolVector2D___len__(self)

    def __getslice__(self, i, j):
        return _UMA.BoolVector2D___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _UMA.BoolVector2D___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _UMA.BoolVector2D___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _UMA.BoolVector2D___delitem__(self, *args)

    def __getitem__(self, *args):
        return _UMA.BoolVector2D___getitem__(self, *args)

    def __setitem__(self, *args):
        return _UMA.BoolVector2D___setitem__(self, *args)

    def pop(self):
        return _UMA.BoolVector2D_pop(self)

    def append(self, x):
        return _UMA.BoolVector2D_append(self, x)

    def empty(self):
        return _UMA.BoolVector2D_empty(self)

    def size(self):
        return _UMA.BoolVector2D_size(self)

    def swap(self, v):
        return _UMA.BoolVector2D_swap(self, v)

    def begin(self):
        return _UMA.BoolVector2D_begin(self)

    def end(self):
        return _UMA.BoolVector2D_end(self)

    def rbegin(self):
        return _UMA.BoolVector2D_rbegin(self)

    def rend(self):
        return _UMA.BoolVector2D_rend(self)

    def clear(self):
        return _UMA.BoolVector2D_clear(self)

    def get_allocator(self):
        return _UMA.BoolVector2D_get_allocator(self)

    def pop_back(self):
        return _UMA.BoolVector2D_pop_back(self)

    def erase(self, *args):
        return _UMA.BoolVector2D_erase(self, *args)

    def __init__(self, *args):
        this = _UMA.new_BoolVector2D(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _UMA.BoolVector2D_push_back(self, x)

    def front(self):
        return _UMA.BoolVector2D_front(self)

    def back(self):
        return _UMA.BoolVector2D_back(self)

    def assign(self, n, x):
        return _UMA.BoolVector2D_assign(self, n, x)

    def resize(self, *args):
        return _UMA.BoolVector2D_resize(self, *args)

    def insert(self, *args):
        return _UMA.BoolVector2D_insert(self, *args)

    def reserve(self, n):
        return _UMA.BoolVector2D_reserve(self, n)

    def capacity(self):
        return _UMA.BoolVector2D_capacity(self)
    __swig_destroy__ = _UMA.delete_BoolVector2D
    __del__ = lambda self: None
BoolVector2D_swigregister = _UMA.BoolVector2D_swigregister
BoolVector2D_swigregister(BoolVector2D)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        this = _UMA.new_Agent(name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add_snapshot_stationary(self, base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target):
        return _UMA.Agent_add_snapshot_stationary(self, base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target)
    __swig_destroy__ = _UMA.delete_Agent
    __del__ = lambda self: None
Agent_swigregister = _UMA.Agent_swigregister
Agent_swigregister(Agent)

class Snapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Snapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Snapshot, name)
    __repr__ = _swig_repr
    STATIONARY = _UMA.Snapshot_STATIONARY
    FORGETFUL = _UMA.Snapshot_FORGETFUL
    UNITTEST = _UMA.Snapshot_UNITTEST
    __swig_setmethods__["_total"] = _UMA.Snapshot__total_set
    __swig_getmethods__["_total"] = _UMA.Snapshot__total_get
    if _newclass:
        _total = _swig_property(_UMA.Snapshot__total_get, _UMA.Snapshot__total_set)
    __swig_setmethods__["_total_"] = _UMA.Snapshot__total__set
    __swig_getmethods__["_total_"] = _UMA.Snapshot__total__get
    if _newclass:
        _total_ = _swig_property(_UMA.Snapshot__total__get, _UMA.Snapshot__total__set)

    def __init__(self, type, base_sensor_size, threshold, name, sensor_ids, sensor_names, cal_target, log_type):
        this = _UMA.new_Snapshot(type, base_sensor_size, threshold, name, sensor_ids, sensor_names, cal_target, log_type)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def decide(self, signal, phi, active):
        return _UMA.Snapshot_decide(self, signal, phi, active)

    def init_size(self, sensor_size):
        return _UMA.Snapshot_init_size(self, sensor_size)

    def init_sensors(self, uuid, names):
        return _UMA.Snapshot_init_sensors(self, uuid, names)

    def init_sensor_pairs(self):
        return _UMA.Snapshot_init_sensor_pairs(self)

    def init_data(self, sensor_ids, sensor_names):
        return _UMA.Snapshot_init_data(self, sensor_ids, sensor_names)

    def free_all_parameters(self):
        return _UMA.Snapshot_free_all_parameters(self)

    def init_pointers(self):
        return _UMA.Snapshot_init_pointers(self)

    def update_state_GPU(self, active):
        return _UMA.Snapshot_update_state_GPU(self, active)

    def update_weights(self, active):
        return _UMA.Snapshot_update_weights(self, active)

    def orient_all(self):
        return _UMA.Snapshot_orient_all(self)

    def update_thresholds(self):
        return _UMA.Snapshot_update_thresholds(self)

    def propagate_GPU(self, signal, load):
        return _UMA.Snapshot_propagate_GPU(self, signal, load)

    def calculate_total(self, active):
        return _UMA.Snapshot_calculate_total(self, active)

    def calculate_target(self):
        return _UMA.Snapshot_calculate_target(self)

    def distance(self, d1, d2):
        return _UMA.Snapshot_distance(self, d1, d2)

    def up_GPU(self, signal, is_stable):
        return _UMA.Snapshot_up_GPU(self, signal, is_stable)

    def halucinate_GPU(self):
        return _UMA.Snapshot_halucinate_GPU(self)

    def gen_mask(self):
        return _UMA.Snapshot_gen_mask(self)

    def getCurrent(self):
        return _UMA.Snapshot_getCurrent(self)

    def getPrediction(self):
        return _UMA.Snapshot_getPrediction(self)

    def getTarget(self):
        return _UMA.Snapshot_getTarget(self)

    def getWeight2D(self):
        return _UMA.Snapshot_getWeight2D(self)

    def getDir2D(self):
        return _UMA.Snapshot_getDir2D(self)

    def getThreshold2D(self):
        return _UMA.Snapshot_getThreshold2D(self)

    def getMask_amper2D(self):
        return _UMA.Snapshot_getMask_amper2D(self)

    def getMask_amper(self):
        return _UMA.Snapshot_getMask_amper(self)

    def getWeight(self):
        return _UMA.Snapshot_getWeight(self)

    def getDir(self):
        return _UMA.Snapshot_getDir(self)

    def getThreshold(self):
        return _UMA.Snapshot_getThreshold(self)

    def getObserve(self):
        return _UMA.Snapshot_getObserve(self)

    def getObserveOld(self):
        return _UMA.Snapshot_getObserveOld(self)

    def getDiag(self):
        return _UMA.Snapshot_getDiag(self)

    def getDiagOld(self):
        return _UMA.Snapshot_getDiagOld(self)

    def getMask(self):
        return _UMA.Snapshot_getMask(self)

    def getUp(self):
        return _UMA.Snapshot_getUp(self)

    def getDown(self):
        return _UMA.Snapshot_getDown(self)

    def getMeasurable(self, idx):
        return _UMA.Snapshot_getMeasurable(self, idx)

    def getMeasurablePair(self, m_idx1, m_idx2):
        return _UMA.Snapshot_getMeasurablePair(self, m_idx1, m_idx2)

    def getName(self):
        return _UMA.Snapshot_getName(self)

    def setTarget(self, signal):
        return _UMA.Snapshot_setTarget(self, signal)

    def setObserve(self, observe):
        return _UMA.Snapshot_setObserve(self, observe)

    def copy_sensor_pair(self, start_idx, end_idx):
        return _UMA.Snapshot_copy_sensor_pair(self, start_idx, end_idx)

    def copy_sensor(self, start_idx, end_idx):
        return _UMA.Snapshot_copy_sensor(self, start_idx, end_idx)

    def copy_mask(self, mask):
        return _UMA.Snapshot_copy_mask(self, mask)

    def generate_delayed_weights(self, mid, merge):
        return _UMA.Snapshot_generate_delayed_weights(self, mid, merge)

    def ampers(self, lists):
        return _UMA.Snapshot_ampers(self, lists)

    def amper(self, list):
        return _UMA.Snapshot_amper(self, list)

    def delays(self, list):
        return _UMA.Snapshot_delays(self, list)

    def amperand(self, mid1, mid2, merge):
        return _UMA.Snapshot_amperand(self, mid1, mid2, merge)

    def pruning(self, signal):
        return _UMA.Snapshot_pruning(self, signal)

    def init_direction(self):
        return _UMA.Snapshot_init_direction(self)

    def init_weight(self):
        return _UMA.Snapshot_init_weight(self)

    def init_thresholds(self):
        return _UMA.Snapshot_init_thresholds(self)

    def init_mask_amper(self):
        return _UMA.Snapshot_init_mask_amper(self)

    def init_other_parameter(self):
        return _UMA.Snapshot_init_other_parameter(self)

    def reallocate_memory(self, sensor_size):
        return _UMA.Snapshot_reallocate_memory(self, sensor_size)

    def gen_direction(self):
        return _UMA.Snapshot_gen_direction(self)

    def gen_weight(self):
        return _UMA.Snapshot_gen_weight(self)

    def gen_thresholds(self):
        return _UMA.Snapshot_gen_thresholds(self)

    def gen_mask_amper(self):
        return _UMA.Snapshot_gen_mask_amper(self)

    def gen_other_parameters(self):
        return _UMA.Snapshot_gen_other_parameters(self)
    __swig_destroy__ = _UMA.delete_Snapshot
    __del__ = lambda self: None
Snapshot_swigregister = _UMA.Snapshot_swigregister
Snapshot_swigregister(Snapshot)

class Snapshot_Stationary(Snapshot):
    __swig_setmethods__ = {}
    for _s in [Snapshot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Snapshot_Stationary, name, value)
    __swig_getmethods__ = {}
    for _s in [Snapshot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Snapshot_Stationary, name)
    __repr__ = _swig_repr

    def __init__(self, base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target, log_path):
        this = _UMA.new_Snapshot_Stationary(base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target, log_path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA.delete_Snapshot_Stationary
    __del__ = lambda self: None

    def update_weights(self, active):
        return _UMA.Snapshot_Stationary_update_weights(self, active)

    def update_thresholds(self):
        return _UMA.Snapshot_Stationary_update_thresholds(self)

    def orient_all(self):
        return _UMA.Snapshot_Stationary_orient_all(self)

    def calculate_total(self, active):
        return _UMA.Snapshot_Stationary_calculate_total(self, active)

    def calculate_target(self):
        return _UMA.Snapshot_Stationary_calculate_target(self)
Snapshot_Stationary_swigregister = _UMA.Snapshot_Stationary_swigregister
Snapshot_Stationary_swigregister(Snapshot_Stationary)

class Snapshot_Forgetful(Snapshot):
    __swig_setmethods__ = {}
    for _s in [Snapshot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Snapshot_Forgetful, name, value)
    __swig_getmethods__ = {}
    for _s in [Snapshot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Snapshot_Forgetful, name)
    __repr__ = _swig_repr

    def __init__(self, base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target, log_path):
        this = _UMA.new_Snapshot_Forgetful(base_sensor_size, threshold, name, sensor_ids, sensor_names, q, cal_target, log_path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA.delete_Snapshot_Forgetful
    __del__ = lambda self: None

    def update_weights(self, active):
        return _UMA.Snapshot_Forgetful_update_weights(self, active)

    def update_thresholds(self):
        return _UMA.Snapshot_Forgetful_update_thresholds(self)

    def orient_all(self):
        return _UMA.Snapshot_Forgetful_orient_all(self)

    def calculate_total(self, active):
        return _UMA.Snapshot_Forgetful_calculate_total(self, active)

    def calculate_target(self):
        return _UMA.Snapshot_Forgetful_calculate_target(self)
Snapshot_Forgetful_swigregister = _UMA.Snapshot_Forgetful_swigregister
Snapshot_Forgetful_swigregister(Snapshot_Forgetful)

class Snapshot_UnitTest(Snapshot):
    __swig_setmethods__ = {}
    for _s in [Snapshot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Snapshot_UnitTest, name, value)
    __swig_getmethods__ = {}
    for _s in [Snapshot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Snapshot_UnitTest, name)
    __repr__ = _swig_repr

    def __init__(self, base_sensor_size, threshold, q, log_path):
        this = _UMA.new_Snapshot_UnitTest(base_sensor_size, threshold, q, log_path)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA.delete_Snapshot_UnitTest
    __del__ = lambda self: None

    def update_weights(self, active):
        return _UMA.Snapshot_UnitTest_update_weights(self, active)

    def orient_all(self):
        return _UMA.Snapshot_UnitTest_orient_all(self)

    def calculate_total(self, active):
        return _UMA.Snapshot_UnitTest_calculate_total(self, active)

    def calculate_target(self):
        return _UMA.Snapshot_UnitTest_calculate_target(self)
Snapshot_UnitTest_swigregister = _UMA.Snapshot_UnitTest_swigregister
Snapshot_UnitTest_swigregister(Snapshot_UnitTest)

class Sensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sensor, name)
    __repr__ = _swig_repr

    def __init__(self, sid, sname, idx):
        this = _UMA.new_Sensor(sid, sname, idx)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setMeasurableDiagPointers(self, _diags, _diags_):
        return _UMA.Sensor_setMeasurableDiagPointers(self, _diags, _diags_)

    def setMeasurableStatusPointers(self, current):
        return _UMA.Sensor_setMeasurableStatusPointers(self, current)

    def setMeasurableValuestoPointers(self):
        return _UMA.Sensor_setMeasurableValuestoPointers(self)

    def setMeasurablePointerstoValues(self):
        return _UMA.Sensor_setMeasurablePointerstoValues(self)

    def init_amper_list(self, ampers):
        return _UMA.Sensor_init_amper_list(self, ampers)

    def setAmperList(self, *args):
        return _UMA.Sensor_setAmperList(self, *args)

    def setIdx(self, idx):
        return _UMA.Sensor_setIdx(self, idx)

    def copyAmperList(self, ampers):
        return _UMA.Sensor_copyAmperList(self, ampers)

    def amper_and_signals(self, observe):
        return _UMA.Sensor_amper_and_signals(self, observe)

    def isSensorActive(self):
        return _UMA.Sensor_isSensorActive(self)

    def pointers_to_null(self):
        return _UMA.Sensor_pointers_to_null(self)

    def save_sensor(self, file):
        return _UMA.Sensor_save_sensor(self, file)

    def load_sensor(self, file):
        return _UMA.Sensor_load_sensor(self, file)
    __swig_destroy__ = _UMA.delete_Sensor
    __del__ = lambda self: None
Sensor_swigregister = _UMA.Sensor_swigregister
Sensor_swigregister(Sensor)

class SensorPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SensorPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SensorPair, name)
    __repr__ = _swig_repr

    def __init__(self, _sensor_i, _sensor_j, threshold):
        this = _UMA.new_SensorPair(_sensor_i, _sensor_j, threshold)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setWeightPointers(self, weights):
        return _UMA.SensorPair_setWeightPointers(self, weights)

    def setDirPointers(self, dirs):
        return _UMA.SensorPair_setDirPointers(self, dirs)

    def setThresholdPointers(self, thresholds):
        return _UMA.SensorPair_setThresholdPointers(self, thresholds)

    def pointers_to_null(self):
        return _UMA.SensorPair_pointers_to_null(self)

    def pointers_to_values(self):
        return _UMA.SensorPair_pointers_to_values(self)

    def values_to_pointers(self):
        return _UMA.SensorPair_values_to_pointers(self)

    def setAllPointers(self, weights, dirs, thresholds):
        return _UMA.SensorPair_setAllPointers(self, weights, dirs, thresholds)

    def getMeasurablePair(self, isOriginPure_i, isOriginPure_j):
        return _UMA.SensorPair_getMeasurablePair(self, isOriginPure_i, isOriginPure_j)

    def save_sensor_pair(self, file):
        return _UMA.SensorPair_save_sensor_pair(self, file)
    __swig_destroy__ = _UMA.delete_SensorPair
    __del__ = lambda self: None
SensorPair_swigregister = _UMA.SensorPair_swigregister
SensorPair_swigregister(SensorPair)

class Measurable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Measurable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Measurable, name)
    __repr__ = _swig_repr

    def __init__(self, idx, isOriginPure):
        this = _UMA.new_Measurable(idx, isOriginPure)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def pointers_to_null(self):
        return _UMA.Measurable_pointers_to_null(self)

    def pointers_to_values(self):
        return _UMA.Measurable_pointers_to_values(self)

    def values_to_pointers(self):
        return _UMA.Measurable_values_to_pointers(self)

    def setDiagPointers(self, _diags, _diags_):
        return _UMA.Measurable_setDiagPointers(self, _diags, _diags_)

    def setStatusPointers(self, status):
        return _UMA.Measurable_setStatusPointers(self, status)

    def setIdx(self, idx):
        return _UMA.Measurable_setIdx(self, idx)

    def save_measurable(self, file):
        return _UMA.Measurable_save_measurable(self, file)

    def load_measurable(self, file):
        return _UMA.Measurable_load_measurable(self, file)
    __swig_destroy__ = _UMA.delete_Measurable
    __del__ = lambda self: None
Measurable_swigregister = _UMA.Measurable_swigregister
Measurable_swigregister(Measurable)

class CPUTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPUTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPUTest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UMA.new_CPUTest()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA.delete_CPUTest
    __del__ = lambda self: None

    def TEST_ind_host(self, row, col):
        return _UMA.CPUTest_TEST_ind_host(self, row, col)

    def TEST_compi_host(self, x):
        return _UMA.CPUTest_TEST_compi_host(self, x)
CPUTest_swigregister = _UMA.CPUTest_swigregister
CPUTest_swigregister(CPUTest)

class GPUTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPUTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPUTest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _UMA.new_GPUTest()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _UMA.delete_GPUTest
    __del__ = lambda self: None

    def TEST_ind_device(self, row, col):
        return _UMA.GPUTest_TEST_ind_device(self, row, col)

    def TEST_compi_device(self, x):
        return _UMA.GPUTest_TEST_compi_device(self, x)

    def TEST_subtraction_kernel(self, b1, b2, size):
        return _UMA.GPUTest_TEST_subtraction_kernel(self, b1, b2, size)

    def TEST_implies_GPU(self, row, col, weights, total, threshold):
        return _UMA.GPUTest_TEST_implies_GPU(self, row, col, weights, total, threshold)

    def TEST_multiply_kernel(self, x, dir):
        return _UMA.GPUTest_TEST_multiply_kernel(self, x, dir)

    def TEST_check_mask(self, mask):
        return _UMA.GPUTest_TEST_check_mask(self, mask)

    def TEST_mask_kernel(self, mask_amper, mask, current):
        return _UMA.GPUTest_TEST_mask_kernel(self, mask_amper, mask, current)
GPUTest_swigregister = _UMA.GPUTest_swigregister
GPUTest_swigregister(GPUTest)

class logManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, logManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, logManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _UMA.new_logManager(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def debug(self):
        return _UMA.logManager_debug(self)

    def verbose(self):
        return _UMA.logManager_verbose(self)

    def info(self):
        return _UMA.logManager_info(self)
    __swig_destroy__ = _UMA.delete_logManager
    __del__ = lambda self: None
logManager_swigregister = _UMA.logManager_swigregister
logManager_swigregister(logManager)

# This file is compatible with both classic and new-style classes.


